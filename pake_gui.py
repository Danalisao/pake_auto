#!/usr/bin/env python3
"""
Pake GUI - Interface graphique pour transformer des sites web en applications de bureau
Utilise l'outil Pake (https://github.com/tw93/Pake) pour cr√©er des applications l√©g√®res
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import subprocess
import threading
import os
import sys
import json
from pathlib import Path
import re
import shutil
import datetime

# Imports optionnels pour le t√©l√©chargement de favicon
try:
    import requests
    from urllib.parse import urljoin, urlparse
    from PIL import Image
    import tempfile
    FAVICON_SUPPORT = True
except ImportError:
    FAVICON_SUPPORT = False
    print("‚ö†Ô∏è Modules manquants pour le t√©l√©chargement de favicon.")
    print("üí° Installez avec: pip install requests pillow")
    print("üìù Le t√©l√©chargement automatique des favicons sera d√©sactiv√©.")

class PakeGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Pake GUI - Transformateur de sites web en applications")
        self.root.geometry("1400x900")  # Fen√™tre plus grande pour √©viter les ascenseurs
        self.root.resizable(True, True)
          # Variables
        self.url_var = tk.StringVar()
        self.name_var = tk.StringVar()
        self.width_var = tk.StringVar(value="1200")
        self.height_var = tk.StringVar(value="800")
        self.icon_path_var = tk.StringVar()
        self.fullscreen_var = tk.BooleanVar()
        self.hide_title_var = tk.BooleanVar()
        self.always_on_top_var = tk.BooleanVar()
        self.auto_favicon_var = tk.BooleanVar(value=FAVICON_SUPPORT)  # Activer seulement si d√©pendances disponibles
        
        # Variables pour contr√¥le de processus
        self.current_process = None
        self.is_building = False
        
        # Configuration par d√©faut
        self.config_file = Path("pake_gui_config.json")
        self.pake_executable = None
        
        self.load_config()
        self.setup_ui()
        
        # V√©rifier les pr√©requis au d√©marrage
        self.root.after(1000, self.check_prerequisites)
        
    def setup_ui(self):
        """Configure l'interface utilisateur"""
        # Style moderne
        style = ttk.Style()
        try:
            style.theme_use('vista')  # Windows
        except:
            try:
                style.theme_use('clam')  # Fallback
            except:
                pass
          # Couleurs personnalis√©es
        style.configure('Title.TLabel', font=('Arial', 14, 'bold'), foreground='#2E86AB')
        style.configure('Accent.TButton', font=('Arial', 10, 'bold'))
          # Frame principal direct sans scrollbar pour √©viter les ascenseurs
        main_frame = ttk.Frame(self.root, padding="12")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Configuration du grid
        main_frame.columnconfigure(1, weight=1)
        
        row = 0
          # Titre avec emoji et style
        title_label = ttk.Label(main_frame, text="üöÄ Pake GUI - Cr√©ateur d'applications de bureau", 
                               style='Title.TLabel')
        title_label.grid(row=row, column=0, columnspan=3, pady=(0, 15))
        row += 1
          # Section URL et nom
        url_frame = ttk.LabelFrame(main_frame, text="üìã Configuration de base", padding="8")
        url_frame.grid(row=row, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 12))
        url_frame.columnconfigure(1, weight=1)
        row += 1
        
        ttk.Label(url_frame, text="URL du site:", font=('Arial', 10, 'bold')).grid(
            row=0, column=0, sticky=tk.W, padx=(0, 10), pady=(0, 8))
        url_entry = ttk.Entry(url_frame, textvariable=self.url_var, width=120, font=('Arial', 14))
        url_entry.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(0, 5), pady=(0, 8))
        
        ttk.Label(url_frame, text="Nom de l'app:", font=('Arial', 10, 'bold')).grid(
            row=1, column=0, sticky=tk.W, padx=(0, 10), pady=(8, 0))
        name_entry = ttk.Entry(url_frame, textvariable=self.name_var, width=120, font=('Arial', 14))
        name_entry.grid(row=1, column=1, sticky=(tk.W, tk.E), padx=(0, 5), pady=(8, 0))
        
        # Section dimensions
        dim_frame = ttk.LabelFrame(main_frame, text="üìê Dimensions de la fen√™tre", padding="10")
        dim_frame.grid(row=row, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 15))
        row += 1
        
        # Grid pour les dimensions
        dims_grid = ttk.Frame(dim_frame)
        dims_grid.grid(row=0, column=0, sticky=(tk.W, tk.E))
        
        ttk.Label(dims_grid, text="Largeur:", font=('Arial', 10, 'bold')).grid(
            row=0, column=0, sticky=tk.W, padx=(0, 8))
        ttk.Entry(dims_grid, textvariable=self.width_var, width=25, font=('Arial', 14)).grid(
            row=0, column=1, padx=(0, 25))
        
        ttk.Label(dims_grid, text="Hauteur:", font=('Arial', 10, 'bold')).grid(
            row=0, column=2, sticky=tk.W, padx=(0, 8))
        ttk.Entry(dims_grid, textvariable=self.height_var, width=25, font=('Arial', 14)).grid(
            row=0, column=3, padx=0)
        
        # Section ic√¥ne
        icon_frame = ttk.LabelFrame(main_frame, text="üé® Ic√¥ne personnalis√©e", padding="10")
        icon_frame.grid(row=row, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 15))
        icon_frame.columnconfigure(1, weight=1)
        row += 1
        ttk.Label(icon_frame, text="Fichier ic√¥ne:", font=('Arial', 10, 'bold')).grid(
            row=0, column=0, sticky=tk.W, padx=(0, 10))
        ttk.Entry(icon_frame, textvariable=self.icon_path_var, state="readonly", font=('Arial', 13), width=80).grid(
            row=0, column=1, sticky=(tk.W, tk.E), padx=(0, 10))
        
        icon_buttons = ttk.Frame(icon_frame)
        icon_buttons.grid(row=0, column=2)
        ttk.Button(icon_buttons, text="üìÅ Parcourir", command=self.browse_icon).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(icon_buttons, text="üóëÔ∏è Effacer", command=self.clear_icon).pack(side=tk.LEFT)
          # Case √† cocher pour le t√©l√©chargement automatique du favicon
        favicon_checkbox = ttk.Checkbutton(icon_frame, text="üåê T√©l√©charger automatiquement le favicon si aucune ic√¥ne", 
                       variable=self.auto_favicon_var)
        favicon_checkbox.grid(row=1, column=0, columnspan=3, sticky=tk.W, pady=(8, 0))
        
        # D√©sactiver si les d√©pendances ne sont pas disponibles
        if not FAVICON_SUPPORT:
            favicon_checkbox.config(state='disabled')
        
        # Section options
        options_frame = ttk.LabelFrame(main_frame, text="‚öôÔ∏è Options avanc√©es", padding="10")
        options_frame.grid(row=row, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 15))
        row += 1
        
        options_grid = ttk.Frame(options_frame)
        options_grid.grid(row=0, column=0, sticky=(tk.W, tk.E))
        
        ttk.Checkbutton(options_grid, text="üñ•Ô∏è Plein √©cran", variable=self.fullscreen_var).grid(
            row=0, column=0, sticky=tk.W, padx=(0, 25))
        ttk.Checkbutton(options_grid, text="üéØ Masquer barre de titre", variable=self.hide_title_var).grid(
            row=0, column=1, sticky=tk.W, padx=(0, 25))
        ttk.Checkbutton(options_grid, text="üìå Toujours au premier plan", variable=self.always_on_top_var).grid(
            row=1, column=0, sticky=tk.W, padx=(0, 25), pady=(8, 0))
        
        # Section presets
        presets_frame = ttk.LabelFrame(main_frame, text="üåü Sites populaires", padding="10")
        presets_frame.grid(row=row, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 15))
        row += 1
        
        # Boutons presets en grille
        presets = [
            ("YouTube", "https://www.youtube.com", "üé•"),
            ("Gmail", "https://mail.google.com", "üìß"),
            ("GitHub", "https://github.com", "üêô"),
            ("Twitter/X", "https://twitter.com", "üê¶"),
            ("WhatsApp Web", "https://web.whatsapp.com", "üí¨"),
            ("ChatGPT", "https://chat.openai.com", "ü§ñ"),
            ("Discord", "https://discord.com/app", "üéÆ"),
            ("Spotify", "https://open.spotify.com", "üéµ"),
            ("Netflix", "https://www.netflix.com", "üé¨")
        ]
        
        for i, (name, url, emoji) in enumerate(presets):
            btn = ttk.Button(presets_frame, text=f"{emoji} {name}", 
                           command=lambda n=name, u=url: self.load_preset(n, u))
            btn.grid(row=i//3, column=i%3, padx=5, pady=3, sticky=(tk.W, tk.E))
            presets_frame.columnconfigure(i%3, weight=1)
        
        # Boutons d'action principaux
        action_frame = ttk.Frame(main_frame)
        action_frame.grid(row=row, column=0, columnspan=3, pady=(15, 10))
        row += 1
        
        ttk.Button(action_frame, text="üîç V√©rifier pr√©requis", 
                  command=self.check_prerequisites).pack(side=tk.LEFT, padx=(0, 10))
        
        self.create_button = ttk.Button(action_frame, text="üöÄ Cr√©er l'application", 
                  command=self.create_app, style="Accent.TButton")
        self.create_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.stop_button = ttk.Button(action_frame, text="‚èπÔ∏è Arr√™ter", 
                  command=self.stop_build, state='disabled')
        self.stop_button.pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(action_frame, text="üìã G√©n√©rer commande", 
                  command=self.show_command).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(action_frame, text="üíæ Sauvegarder config", 
                  command=self.save_config).pack(side=tk.LEFT)
        
        # Zone de log - r√©duite pour √©viter les ascenseurs
        log_frame = ttk.LabelFrame(main_frame, text="üìÑ Journal d'activit√©", padding="8")
        log_frame.grid(row=row, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 8))
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)
        main_frame.rowconfigure(row, weight=1)        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=8, wrap=tk.WORD, font=('Consolas', 11))
        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        # Barre de progression
        self.progress = ttk.Progressbar(main_frame, mode='indeterminate')
        self.progress.grid(row=row+1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(5, 0))
        
        self.log("‚úÖ Interface initialis√©e avec succ√®s")
        
    def load_preset(self, name, url):
        """Charge un preset de site populaire"""
        self.url_var.set(url)
        self.name_var.set(name)
        self.log(f"üìù Preset charg√©: {name}")
        
    def browse_icon(self):
        """Ouvre un dialogue pour s√©lectionner une ic√¥ne"""
        filetypes = [
            ("Fichiers ic√¥ne", "*.ico *.png *.jpg *.jpeg *.gif *.bmp"),
            ("Tous les fichiers", "*.*")
        ]
        filename = filedialog.askopenfilename(title="S√©lectionner une ic√¥ne", filetypes=filetypes)
        if filename:
            self.icon_path_var.set(filename)
            self.log(f"üé® Ic√¥ne s√©lectionn√©e: {os.path.basename(filename)}")
            
    def clear_icon(self):
        """Efface le chemin de l'ic√¥ne"""
        self.icon_path_var.set("")
        self.log("üóëÔ∏è Ic√¥ne effac√©e")
        
    def log(self, message):
        """Ajoute un message au journal avec timestamp"""
        import datetime
        timestamp = datetime.datetime.now().strftime("%H:%M:%S")
        full_message = f"[{timestamp}] {message}"
        self.log_text.insert(tk.END, f"{full_message}\n")
        self.log_text.see(tk.END)
        self.root.update_idletasks()
        
    def find_pake_executable(self):
        """Trouve l'ex√©cutable Pake sur le syst√®me avec d√©tection avanc√©e"""
        self.log("üîç Recherche de l'ex√©cutable Pake...")
        
        # 1. Essayer d'abord la commande directe dans le PATH
        try:
            result = subprocess.run(['pake', '--version'], capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                self.log("‚úÖ Pake trouv√© dans le PATH syst√®me")
                return 'pake'
        except (FileNotFoundError, subprocess.TimeoutExpired):
            pass
        
        # 2. Chercher avec shutil.which (plus fiable)
        pake_path = shutil.which('pake')
        if pake_path:
            self.log(f"‚úÖ Pake trouv√© via which: {pake_path}")
            return pake_path
          # 3. Obtenir le dossier global npm et chercher dedans
        try:
            result = subprocess.run(['npm', 'root', '-g'], capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                npm_global = result.stdout.strip()
                self.log(f"üìÇ Dossier npm global: {npm_global}")
                
                # Chercher dans .bin avec toutes les variantes possibles
                bin_paths = [
                    os.path.join(npm_global, '.bin', 'pake.cmd'),
                    os.path.join(npm_global, '.bin', 'pake.CMD'),  # Windows majuscules
                    os.path.join(npm_global, '.bin', 'pake'),
                    os.path.join(npm_global, '.bin', 'pake.exe'),
                    os.path.join(npm_global, '.bin', 'pake.EXE'),
                ]
                
                for bin_path in bin_paths:
                    if os.path.exists(bin_path):
                        self.log(f"‚úÖ Pake trouv√©: {bin_path}")
                        return bin_path
                        
        except (FileNotFoundError, subprocess.TimeoutExpired):
            self.log("‚ö†Ô∏è npm non trouv√© ou timeout")
          # 4. Chercher dans les chemins Windows typiques
        windows_paths = [
            os.path.expanduser('~\\AppData\\Roaming\\npm\\pake.cmd'),
            os.path.expanduser('~\\AppData\\Roaming\\npm\\pake.CMD'),  # Majuscules
            os.path.expanduser('~\\AppData\\Roaming\\npm\\pake.exe'),
            os.path.expanduser('~\\AppData\\Roaming\\npm\\pake.EXE'),
            os.path.expanduser('~\\AppData\\Roaming\\npm\\pake'),
            'C:\\Program Files\\nodejs\\pake.cmd',
            'C:\\Program Files\\nodejs\\pake.CMD',
            'C:\\Program Files\\nodejs\\pake.exe',
            'C:\\Program Files\\nodejs\\pake.EXE',
            'C:\\Program Files\\nodejs\\pake',
            'C:\\Program Files (x86)\\nodejs\\pake.cmd',
            'C:\\Program Files (x86)\\nodejs\\pake.CMD',
            'C:\\Program Files (x86)\\nodejs\\pake.exe',
            'C:\\Program Files (x86)\\nodejs\\pake.EXE',
            'C:\\Program Files (x86)\\nodejs\\pake',
        ]
        
        self.log("üîç Recherche dans les chemins Windows...")
        for path in windows_paths:
            if os.path.exists(path):
                self.log(f"‚úÖ Pake trouv√©: {path}")
                return path
          # 5. Chercher dans le PATH √©tendu manuellement
        path_env = os.environ.get('PATH', '')
        for path_dir in path_env.split(os.pathsep):
            if path_dir.strip():
                for exe_name in ['pake.cmd', 'pake.CMD', 'pake.exe', 'pake.EXE', 'pake']:
                    full_path = os.path.join(path_dir.strip(), exe_name)
                    if os.path.exists(full_path):
                        self.log(f"‚úÖ Pake trouv√© dans PATH: {full_path}")
                        return full_path
                        
        self.log("‚ùå Pake non trouv√© sur le syst√®me")
        return None
        
    def check_prerequisites(self):
        """V√©rifie si Node.js, Rust et Pake sont install√©s"""
        self.log("üîç === V√©rification des pr√©requis ===")
        
        def check():
            all_ok = True
            
            # V√©rifier Node.js
            try:
                result = subprocess.run(['node', '--version'], capture_output=True, text=True, timeout=5)
                if result.returncode == 0:
                    version = result.stdout.strip()
                    self.log(f"‚úÖ Node.js install√©: {version}")
                else:
                    self.log("‚ùå Node.js: commande √©chou√©e")
                    all_ok = False
            except (FileNotFoundError, subprocess.TimeoutExpired):
                self.log("‚ùå Node.js non install√© ou non accessible")
                self.log("üí° Installez Node.js depuis: https://nodejs.org/")
                all_ok = False
                
            # V√©rifier npm
            try:
                result = subprocess.run(['npm', '--version'], capture_output=True, text=True, timeout=5)
                if result.returncode == 0:
                    version = result.stdout.strip()
                    self.log(f"‚úÖ npm install√©: {version}")
                else:
                    self.log("‚ùå npm: commande √©chou√©e")
                    all_ok = False
            except (FileNotFoundError, subprocess.TimeoutExpired):
                self.log("‚ùå npm non install√© ou non accessible")
                all_ok = False
                
            # V√©rifier Rust
            try:
                result = subprocess.run(['rustc', '--version'], capture_output=True, text=True, timeout=5)
                if result.returncode == 0:
                    version = result.stdout.strip()
                    self.log(f"‚úÖ Rust install√©: {version}")
                else:
                    self.log("‚ùå Rust: commande √©chou√©e")
                    all_ok = False
            except (FileNotFoundError, subprocess.TimeoutExpired):
                self.log("‚ùå Rust non install√© ou non accessible")
                self.log("üí° Installez Rust depuis: https://rustup.rs/")
                all_ok = False
                  
            # V√©rifier Pake avec d√©tection avanc√©e
            pake_path = self.find_pake_executable()
            if pake_path:
                try:
                    # Tester la commande Pake
                    result = subprocess.run([pake_path, '--version'], capture_output=True, text=True, timeout=10)
                    if result.returncode == 0:
                        version = result.stdout.strip()
                        self.log(f"‚úÖ Pake install√©: {version}")
                        self.log(f"üìç Chemin utilis√©: {pake_path}")
                        self.pake_executable = pake_path
                    else:
                        self.log(f"‚ùå Pake: commande √©chou√©e (code: {result.returncode})")
                        if result.stderr:
                            self.log(f"‚ùå Erreur: {result.stderr.strip()}")
                        self.pake_executable = None
                        all_ok = False
                except (subprocess.TimeoutExpired, Exception) as e:
                    self.log(f"‚ùå Erreur lors du test de Pake: {e}")
                    self.pake_executable = None
                    all_ok = False
            else:
                self.log("‚ùå Pake non install√© ou non trouv√©")
                self.log("üí° Installez Pake avec: npm install -g pake-cli")
                self.log("üí° Ou red√©marrez ce programme apr√®s installation")
                self.log("üí° Assurez-vous que le PATH npm global est configur√©")
                self.pake_executable = None
                all_ok = False
                
            # R√©sum√© final
            if all_ok:
                self.log("üéâ === Tous les pr√©requis sont install√©s! ===")
            else:
                self.log("‚ö†Ô∏è === Certains pr√©requis manquent ===")
                self.log("üí° Consultez HELP.md pour les instructions d'installation")
                
        # Lancer la v√©rification dans un thread
        threading.Thread(target=check, daemon=True).start()
        
    def generate_command(self):
        """G√©n√®re la commande Pake avec l'ex√©cutable d√©tect√©"""
        if not self.url_var.get().strip():
            return None, "URL manquante"
            
        url = self.url_var.get().strip()
        name = self.name_var.get().strip() or "MonApp"
        
        # Nettoyer le nom (supprimer caract√®res sp√©ciaux)
        name = re.sub(r'[^\w\s-]', '', name).strip()
        name = re.sub(r'\s+', '_', name)
        
        # Utiliser l'ex√©cutable Pake d√©tect√© ou fallback
        pake_cmd = self.pake_executable or 'pake'
        cmd = [pake_cmd, url, '--name', name]
        
        # Ajouter les options
        if self.width_var.get() and self.width_var.get().isdigit():
            cmd.extend(['--width', self.width_var.get()])
            
        if self.height_var.get() and self.height_var.get().isdigit():
            cmd.extend(['--height', self.height_var.get()])        # Gestion de l'ic√¥ne avec t√©l√©chargement automatique du favicon
        icon_path = self.icon_path_var.get()
        if icon_path and os.path.exists(icon_path):
            # Utiliser l'ic√¥ne sp√©cifi√©e par l'utilisateur
            cmd.extend(['--icon', icon_path])
        elif self.auto_favicon_var.get():
            # Tenter de t√©l√©charger le favicon automatiquement si l'option est activ√©e
            self.log("üé® Aucune ic√¥ne sp√©cifi√©e, tentative de t√©l√©chargement du favicon...")
            favicon_path = self.download_favicon(url)
            if favicon_path and os.path.exists(favicon_path):
                cmd.extend(['--icon', favicon_path])
                self.log(f"‚úÖ Favicon utilis√© comme ic√¥ne: {os.path.basename(favicon_path)}")
            else:
                self.log("‚ö†Ô∏è Favicon non trouv√©, ic√¥ne par d√©faut de Pake utilis√©e")
        else:
            self.log("‚ÑπÔ∏è T√©l√©chargement automatique du favicon d√©sactiv√©, ic√¥ne par d√©faut de Pake utilis√©e")
        if self.fullscreen_var.get():
            cmd.append('--fullscreen')
            
        if self.hide_title_var.get():
            cmd.append('--hide-title-bar')
            
        if self.always_on_top_var.get():
            cmd.append('--always-on-top')
            cmd.append('--always-on-top')
            
        return cmd, None
        
    def show_command(self):
        """Affiche la commande qui sera ex√©cut√©e"""
        cmd, error = self.generate_command()
        if error:
            messagebox.showerror("Erreur", error)
            return
            
        if cmd:
            cmd_str = ' '.join(f'"{arg}"' if ' ' in str(arg) else str(arg) for arg in cmd)
            
            # Cr√©er une fen√™tre pour afficher la commande
            cmd_window = tk.Toplevel(self.root)
            cmd_window.title("Commande Pake g√©n√©r√©e")
            cmd_window.geometry("600x300")
            cmd_window.transient(self.root)
            
            ttk.Label(cmd_window, text="Commande qui sera ex√©cut√©e:", font=('Arial', 10, 'bold')).pack(pady=10)
            
            # Zone de texte pour la commande
            cmd_text = scrolledtext.ScrolledText(cmd_window, height=8, wrap=tk.WORD, font=('Consolas', 9))
            cmd_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))
            cmd_text.insert('1.0', cmd_str)
            cmd_text.config(state='disabled')
              # Bouton pour copier
            def copy_command():
                cmd_window.clipboard_clear()
                cmd_window.clipboard_append(cmd_str)
                messagebox.showinfo("Copi√©", "Commande copi√©e dans le presse-papiers!")
                
            ttk.Button(cmd_window, text="üìã Copier dans le presse-papiers", 
                      command=copy_command).pack(pady=(0, 10))
            
            self.log(f"üìã Commande g√©n√©r√©e et affich√©e")
        else:
            messagebox.showerror("Erreur", "Impossible de g√©n√©rer la commande")
            
    def create_app(self):
        """Lance la cr√©ation de l'application"""
        cmd, error = self.generate_command()
        if error:
            messagebox.showerror("Erreur", error)
            return
            
        if not self.pake_executable:
            messagebox.showerror("Erreur", "Pake n'est pas install√© ou non trouv√©!\nVeuillez v√©rifier les pr√©requis.")
            return
            
        # Activer l'√©tat de construction
        self.is_building = True
        self.create_button.config(state='disabled')
        self.stop_button.config(state='normal')
            
        def run_pake():
            try:
                self.progress.start(10)
                self.log("üöÄ === D√©marrage de la cr√©ation ===")
                cmd_str = ' '.join(f'"{arg}"' if ' ' in str(arg) else str(arg) for arg in cmd)
                self.log(f"üìù Commande: {cmd_str}")
                self.log(f"üìç Ex√©cutable: {self.pake_executable}")
                
                # Changer vers le r√©pertoire de travail si n√©cessaire
                cwd = os.getcwd()
                self.log(f"üìÇ R√©pertoire de travail: {cwd}")
                
                # Ex√©cuter Pake
                self.current_process = subprocess.Popen(
                    cmd,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.STDOUT,
                    text=True,
                    universal_newlines=True,
                    cwd=cwd
                )                
                # Lire la sortie en temps r√©el
                output_lines = []
                for line in self.current_process.stdout:
                    if not self.is_building:  # V√©rifier si l'arr√™t a √©t√© demand√©
                        break
                    line = line.strip()
                    if line:
                        output_lines.append(line)
                        self.log(f"üì¶ {line}")
                        
                self.current_process.wait()
                
                self.log(f"üèÅ Processus termin√© avec le code: {self.current_process.returncode}")
                
                if self.current_process.returncode == 0 and self.is_building:
                    self.log("üéâ === APPLICATION CR√â√âE AVEC SUCC√àS! ===")
                    self.log("üìÅ V√©rifiez le dossier courant pour les fichiers g√©n√©r√©s")
                    messagebox.showinfo("Succ√®s", 
                        "üéâ L'application a √©t√© cr√©√©e avec succ√®s!\n\n"
                        "V√©rifiez le dossier courant pour:\n"
                        "‚Ä¢ Le fichier d'installation (.msi, .deb, .dmg)\n"
                        "‚Ä¢ Les fichiers de l'application")
                elif self.is_building:  # Seulement afficher l'erreur si pas d'arr√™t manuel
                    self.log(f"‚ùå === ERREUR LORS DE LA CR√âATION ===")
                    error_msg = "Une erreur s'est produite lors de la cr√©ation."
                    if output_lines:
                        error_msg += f"\n\nDerni√®res lignes de sortie:\n" + "\n".join(output_lines[-5:])
                    messagebox.showerror("Erreur", error_msg)
                    
            except Exception as e:
                if self.is_building:  # Seulement afficher l'erreur si pas d'arr√™t manuel
                    self.log(f"‚ùå Exception: {str(e)}")
                    messagebox.showerror("Erreur", f"Erreur lors de l'ex√©cution:\n{str(e)}")
            finally:
                self.is_building = False
                self.current_process = None
                self.progress.stop()
                self.create_button.config(state='normal')
                self.stop_button.config(state='disabled')
                
        # Sauvegarder la config avant de commencer
        self.save_config()
        
        # Lancer dans un thread s√©par√©
        threading.Thread(target=run_pake, daemon=True).start()
        
    def stop_build(self):
        """Arr√™te le processus de cr√©ation en cours"""
        if self.current_process and self.is_building:
            try:
                self.current_process.terminate()
                self.log("‚èπÔ∏è Arr√™t du processus demand√©...")
                
                # Attendre un peu pour la terminaison propre
                try:
                    self.current_process.wait(timeout=3)
                    self.log("‚úÖ Processus arr√™t√© proprement")
                except subprocess.TimeoutExpired:
                    # Forcer l'arr√™t si n√©cessaire
                    self.current_process.kill()
                    self.log("üõë Processus forc√© √† s'arr√™ter")
                    
            except Exception as e:
                self.log(f"‚ö†Ô∏è Erreur lors de l'arr√™t: {e}")
            finally:
                self.is_building = False
                self.current_process = None
                self.progress.stop()
                self.create_button.config(state='normal')
                self.stop_button.config(state='disabled')
                self.log("üîÑ Interface pr√™te pour une nouvelle cr√©ation")
        else:
            self.log("‚ÑπÔ∏è Aucun processus en cours √† arr√™ter")
            
    def save_config(self):
        """Sauvegarde la configuration actuelle"""
        config = {
            'url': self.url_var.get(),
            'name': self.name_var.get(),
            'width': self.width_var.get(),
            'height': self.height_var.get(),
            'icon_path': self.icon_path_var.get(),
            'fullscreen': self.fullscreen_var.get(),
            'hide_title': self.hide_title_var.get(),
            'always_on_top': self.always_on_top_var.get(),
            'auto_favicon': self.auto_favicon_var.get()
        }
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            self.log("üíæ Configuration sauvegard√©e")
        except Exception as e:
            self.log(f"‚ö†Ô∏è Impossible de sauvegarder la config: {e}")
            
    def load_config(self):
        """Charge la configuration sauvegard√©e"""
        if self.config_file.exists():
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)                # Charger les valeurs sauvegard√©es
                self.url_var.set(config.get('url', ''))
                self.name_var.set(config.get('name', ''))
                self.width_var.set(config.get('width', '1200'))
                self.height_var.set(config.get('height', '800'))
                self.icon_path_var.set(config.get('icon_path', ''))
                self.fullscreen_var.set(config.get('fullscreen', False))
                self.hide_title_var.set(config.get('hide_title', False))
                self.always_on_top_var.set(config.get('always_on_top', False))
                self.auto_favicon_var.set(config.get('auto_favicon', True))
                
                print("‚úÖ Configuration charg√©e depuis pake_gui_config.json")
                
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur lors du chargement de la config: {e}")
                
    def download_favicon(self, url):
        """T√©l√©charge automatiquement le favicon d'un site web"""
        if not FAVICON_SUPPORT:
            self.log("‚ùå T√©l√©chargement de favicon non disponible - modules manquants")
            self.log("üí° Installez avec: pip install requests pillow")
            return None
            
        try:
            self.log(f"üîç Recherche du favicon pour {url}")
            
            # Nettoyer et valider l'URL
            if not url.startswith(('http://', 'https://')):
                url = 'https://' + url
            
            parsed_url = urlparse(url)
            base_url = f"{parsed_url.scheme}://{parsed_url.netloc}"
            
            # Liste des emplacements possibles du favicon
            favicon_urls = [
                urljoin(base_url, '/favicon.ico'),
                urljoin(base_url, '/apple-touch-icon.png'),
                urljoin(base_url, '/apple-touch-icon-precomposed.png'),
                urljoin(base_url, '/favicon.png'),
                urljoin(base_url, '/favicon.svg'),
            ]
            
            # Essayer de r√©cup√©rer le favicon depuis la page HTML
            try:
                response = requests.get(url, timeout=10, headers={
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                })
                if response.status_code == 200:
                    html_content = response.text
                    # Chercher les balises link rel="icon" ou rel="shortcut icon"
                    import re
                    icon_patterns = [
                        r'<link[^>]*rel=["\'](?:shortcut )?icon["\'][^>]*href=["\']([^"\']+)["\'][^>]*>',
                        r'<link[^>]*href=["\']([^"\']+)["\'][^>]*rel=["\'](?:shortcut )?icon["\'][^>]*>',
                        r'<link[^>]*rel=["\']apple-touch-icon["\'][^>]*href=["\']([^"\']+)["\'][^>]*>',
                    ]
                    
                    for pattern in icon_patterns:
                        matches = re.findall(pattern, html_content, re.IGNORECASE)
                        for match in matches:
                            favicon_url = urljoin(base_url, match)
                            if favicon_url not in favicon_urls:
                                favicon_urls.insert(0, favicon_url)
            except:
                pass
            
            # Essayer de t√©l√©charger le favicon
            for favicon_url in favicon_urls:
                try:
                    self.log(f"üîó Tentative: {favicon_url}")
                    response = requests.get(favicon_url, timeout=10, headers={
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                    })
                    
                    if response.status_code == 200 and len(response.content) > 100:
                        # Cr√©er un dossier pour les favicons s'il n'existe pas
                        favicon_dir = Path("favicons")
                        favicon_dir.mkdir(exist_ok=True)
                        
                        # D√©terminer l'extension du fichier
                        content_type = response.headers.get('content-type', '').lower()
                        if 'png' in content_type:
                            ext = '.png'
                        elif 'svg' in content_type:
                            ext = '.svg'
                        elif 'jpeg' in content_type or 'jpg' in content_type:
                            ext = '.jpg'
                        elif 'gif' in content_type:
                            ext = '.gif'
                        else:
                            ext = '.ico'
                        
                        # Nom du fichier bas√© sur le domaine
                        domain = parsed_url.netloc.replace('www.', '').replace(':', '_')
                        favicon_path = favicon_dir / f"{domain}_favicon{ext}"
                        
                        # Sauvegarder le favicon
                        with open(favicon_path, 'wb') as f:
                            f.write(response.content)
                        
                        # V√©rifier que c'est bien une image valide
                        try:
                            if ext != '.svg':  # SVG n'est pas support√© par PIL
                                with Image.open(favicon_path) as img:
                                    # Convertir en PNG si n√©cessaire
                                    if ext != '.png':
                                        png_path = favicon_path.with_suffix('.png')
                                        img.save(png_path, 'PNG')
                                        favicon_path.unlink()  # Supprimer l'original
                                        favicon_path = png_path
                        except Exception as img_error:
                            self.log(f"‚ö†Ô∏è Erreur de validation image: {img_error}")
                            if favicon_path.exists():
                                favicon_path.unlink()
                            continue
                        
                        self.log(f"‚úÖ Favicon t√©l√©charg√©: {favicon_path}")
                        return str(favicon_path.absolute())
                        
                except requests.RequestException as e:
                    self.log(f"‚ö†Ô∏è √âchec {favicon_url}: {e}")
                    continue
                except Exception as e:
                    self.log(f"‚ö†Ô∏è Erreur inattendue: {e}")
                    continue
            
            self.log("‚ùå Aucun favicon trouv√©")
            return None
            
        except Exception as e:
            self.log(f"‚ùå Erreur lors du t√©l√©chargement du favicon: {e}")
            return None

def main():
    """Point d'entr√©e principal de l'application"""
    # Configuration de l'application
    root = tk.Tk()
    
    # Am√©liorer le rendu sur Windows avec mise √† l'√©chelle
    try:
        from ctypes import windll
        windll.shcore.SetProcessDpiAwareness(1)
    except:
        pass
        
    try:
        root.tk.call('tk', 'scaling', 1.0)
    except:
        pass
    
    # Ic√¥ne de l'application (si disponible)
    try:
        root.iconbitmap('icon.ico')
    except:
        pass
    
    # Cr√©er l'application
    app = PakeGUI(root)
    
    # G√©rer la fermeture propre
    def on_closing():
        try:
            app.save_config()
        except:
            pass
        root.destroy()
        
    root.protocol("WM_DELETE_WINDOW", on_closing)
    
    # Message de d√©marrage
    print("üöÄ Pake GUI d√©marr√©")
    print("üìÇ R√©pertoire de travail:", os.getcwd())
    
    # Lancer l'interface graphique
    try:
        root.mainloop()
    except KeyboardInterrupt:
        print("\nüëã Arr√™t demand√© par l'utilisateur")
    except Exception as e:
        print(f"‚ùå Erreur fatale: {e}")
        
    print("üëã Pake GUI ferm√©")

if __name__ == "__main__":
    main()
